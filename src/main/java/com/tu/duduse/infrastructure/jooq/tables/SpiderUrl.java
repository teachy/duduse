/*
 * This file is generated by jOOQ.
 */
package com.tu.duduse.infrastructure.jooq.tables;


import com.tu.duduse.infrastructure.jooq.DefaultSchema;
import com.tu.duduse.infrastructure.jooq.Indexes;
import com.tu.duduse.infrastructure.jooq.Keys;
import com.tu.duduse.infrastructure.jooq.tables.records.SpiderUrlRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpiderUrl extends TableImpl<SpiderUrlRecord> {

    private static final long serialVersionUID = 630363497;

    /**
     * The reference instance of <code>spider_url</code>
     */
    public static final SpiderUrl SPIDER_URL = new SpiderUrl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpiderUrlRecord> getRecordType() {
        return SpiderUrlRecord.class;
    }

    /**
     * The column <code>spider_url.id</code>.
     */
    public final TableField<SpiderUrlRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>spider_url.name</code>. 网站名称
     */
    public final TableField<SpiderUrlRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "网站名称");

    /**
     * The column <code>spider_url.url</code>. 搜索url
     */
    public final TableField<SpiderUrlRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "搜索url");

    /**
     * The column <code>spider_url.xpath</code>. 解析规则
     */
    public final TableField<SpiderUrlRecord, String> XPATH = createField("xpath", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "解析规则");

    /**
     * The column <code>spider_url.charset</code>. 网站编码
     */
    public final TableField<SpiderUrlRecord, String> CHARSET = createField("charset", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "网站编码");

    /**
     * The column <code>spider_url.type</code>. 网站类型
     */
    public final TableField<SpiderUrlRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "网站类型");

    /**
     * The column <code>spider_url.status</code>. 是否可用（1为可用）
     */
    public final TableField<SpiderUrlRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(4).nullable(false), this, "是否可用（1为可用）");

    /**
     * The column <code>spider_url.error_num</code>. 错误次数
     */
    public final TableField<SpiderUrlRecord, Integer> ERROR_NUM = createField("error_num", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "错误次数");

    /**
     * Create a <code>spider_url</code> table reference
     */
    public SpiderUrl() {
        this(DSL.name("spider_url"), null);
    }

    /**
     * Create an aliased <code>spider_url</code> table reference
     */
    public SpiderUrl(String alias) {
        this(DSL.name(alias), SPIDER_URL);
    }

    /**
     * Create an aliased <code>spider_url</code> table reference
     */
    public SpiderUrl(Name alias) {
        this(alias, SPIDER_URL);
    }

    private SpiderUrl(Name alias, Table<SpiderUrlRecord> aliased) {
        this(alias, aliased, null);
    }

    private SpiderUrl(Name alias, Table<SpiderUrlRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SpiderUrl(Table<O> child, ForeignKey<O, SpiderUrlRecord> key) {
        super(child, key, SPIDER_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPIDER_URL_NAME, Indexes.SPIDER_URL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SpiderUrlRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SPIDER_URL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpiderUrlRecord> getPrimaryKey() {
        return Keys.KEY_SPIDER_URL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpiderUrlRecord>> getKeys() {
        return Arrays.<UniqueKey<SpiderUrlRecord>>asList(Keys.KEY_SPIDER_URL_PRIMARY, Keys.KEY_SPIDER_URL_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpiderUrl as(String alias) {
        return new SpiderUrl(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpiderUrl as(Name alias) {
        return new SpiderUrl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpiderUrl rename(String name) {
        return new SpiderUrl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpiderUrl rename(Name name) {
        return new SpiderUrl(name, null);
    }
}
