/*
 * This file is generated by jOOQ.
 */
package com.tu.duduse.infrastructure.jooq.tables;


import com.tu.duduse.infrastructure.jooq.DefaultSchema;
import com.tu.duduse.infrastructure.jooq.Indexes;
import com.tu.duduse.infrastructure.jooq.Keys;
import com.tu.duduse.infrastructure.jooq.tables.records.SpiderQueueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 爬虫队列
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpiderQueue extends TableImpl<SpiderQueueRecord> {

    private static final long serialVersionUID = 760051717;

    /**
     * The reference instance of <code>spider_queue</code>
     */
    public static final SpiderQueue SPIDER_QUEUE = new SpiderQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpiderQueueRecord> getRecordType() {
        return SpiderQueueRecord.class;
    }

    /**
     * The column <code>spider_queue.ID</code>. 队列id
     */
    public final TableField<SpiderQueueRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "队列id");

    /**
     * The column <code>spider_queue.SPIDER_ID</code>. 爬虫id
     */
    public final TableField<SpiderQueueRecord, String> SPIDER_ID = createField("SPIDER_ID", org.jooq.impl.SQLDataType.VARCHAR(32), this, "爬虫id");

    /**
     * The column <code>spider_queue.REQUEST</code>. 请求信息
     */
    public final TableField<SpiderQueueRecord, String> REQUEST = createField("REQUEST", org.jooq.impl.SQLDataType.CLOB, this, "请求信息");

    /**
     * The column <code>spider_queue.CREATETIME</code>. 创建时间
     */
    public final TableField<SpiderQueueRecord, Timestamp> CREATETIME = createField("CREATETIME", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>spider_queue.QUEUE_INDEX</code>. 序号
     */
    public final TableField<SpiderQueueRecord, Integer> QUEUE_INDEX = createField("QUEUE_INDEX", org.jooq.impl.SQLDataType.INTEGER, this, "序号");

    /**
     * Create a <code>spider_queue</code> table reference
     */
    public SpiderQueue() {
        this(DSL.name("spider_queue"), null);
    }

    /**
     * Create an aliased <code>spider_queue</code> table reference
     */
    public SpiderQueue(String alias) {
        this(DSL.name(alias), SPIDER_QUEUE);
    }

    /**
     * Create an aliased <code>spider_queue</code> table reference
     */
    public SpiderQueue(Name alias) {
        this(alias, SPIDER_QUEUE);
    }

    private SpiderQueue(Name alias, Table<SpiderQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private SpiderQueue(Name alias, Table<SpiderQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("爬虫队列"));
    }

    public <O extends Record> SpiderQueue(Table<O> child, ForeignKey<O, SpiderQueueRecord> key) {
        super(child, key, SPIDER_QUEUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPIDER_QUEUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpiderQueueRecord> getPrimaryKey() {
        return Keys.KEY_SPIDER_QUEUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpiderQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<SpiderQueueRecord>>asList(Keys.KEY_SPIDER_QUEUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpiderQueue as(String alias) {
        return new SpiderQueue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpiderQueue as(Name alias) {
        return new SpiderQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpiderQueue rename(String name) {
        return new SpiderQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpiderQueue rename(Name name) {
        return new SpiderQueue(name, null);
    }
}
