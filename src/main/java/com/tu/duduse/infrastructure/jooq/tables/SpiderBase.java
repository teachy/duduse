/*
 * This file is generated by jOOQ.
 */
package com.tu.duduse.infrastructure.jooq.tables;


import com.tu.duduse.infrastructure.jooq.DefaultSchema;
import com.tu.duduse.infrastructure.jooq.Indexes;
import com.tu.duduse.infrastructure.jooq.Keys;
import com.tu.duduse.infrastructure.jooq.tables.records.SpiderBaseRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 爬虫基本信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpiderBase extends TableImpl<SpiderBaseRecord> {

    private static final long serialVersionUID = 1301242356;

    /**
     * The reference instance of <code>spider_base</code>
     */
    public static final SpiderBase SPIDER_BASE = new SpiderBase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpiderBaseRecord> getRecordType() {
        return SpiderBaseRecord.class;
    }

    /**
     * The column <code>spider_base.ID</code>. 爬虫id
     */
    public final TableField<SpiderBaseRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "爬虫id");

    /**
     * The column <code>spider_base.NAME</code>. 名称
     */
    public final TableField<SpiderBaseRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(128), this, "名称");

    /**
     * The column <code>spider_base.DESCRIPTION</code>. 描述
     */
    public final TableField<SpiderBaseRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(256), this, "描述");

    /**
     * The column <code>spider_base.START_TIME</code>. 开始时间 格式为YYYY-MM-DD HH:MM:SS
     */
    public final TableField<SpiderBaseRecord, Timestamp> START_TIME = createField("START_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "开始时间 格式为YYYY-MM-DD HH:MM:SS");

    /**
     * The column <code>spider_base.LAST_DATE</code>. 最后一次运行时间 格式为YYYY-MM-DD HH:MM:SS
     */
    public final TableField<SpiderBaseRecord, Timestamp> LAST_DATE = createField("LAST_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "最后一次运行时间 格式为YYYY-MM-DD HH:MM:SS");

    /**
     * The column <code>spider_base.HOST_ID</code>. hostId
     */
    public final TableField<SpiderBaseRecord, String> HOST_ID = createField("HOST_ID", org.jooq.impl.SQLDataType.VARCHAR(32), this, "hostId");

    /**
     * The column <code>spider_base.HOST_TYPE</code>. hostType
     */
    public final TableField<SpiderBaseRecord, String> HOST_TYPE = createField("HOST_TYPE", org.jooq.impl.SQLDataType.VARCHAR(32), this, "hostType");

    /**
     * The column <code>spider_base.ENABLE</code>. 0 未启用
            1 已启动
     */
    public final TableField<SpiderBaseRecord, Integer> ENABLE = createField("ENABLE", org.jooq.impl.SQLDataType.INTEGER, this, "0 未启用\r\n            1 已启动");

    /**
     * The column <code>spider_base.STATUS</code>. 状态
     */
    public final TableField<SpiderBaseRecord, Integer> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.INTEGER, this, "状态");

    /**
     * The column <code>spider_base.NEXT_START_TIME</code>. 下次开始时间 格式为YYYY-MM-DD HH:MM:SS
     */
    public final TableField<SpiderBaseRecord, Timestamp> NEXT_START_TIME = createField("NEXT_START_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "下次开始时间 格式为YYYY-MM-DD HH:MM:SS");

    /**
     * The column <code>spider_base.UPDATE_TIME</code>. 配置更新时间 格式为YYYY-MM-DD HH:MM:SS
     */
    public final TableField<SpiderBaseRecord, Timestamp> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "配置更新时间 格式为YYYY-MM-DD HH:MM:SS");

    /**
     * The column <code>spider_base.PAGE_XML</code>. xml配置信息
     */
    public final TableField<SpiderBaseRecord, String> PAGE_XML = createField("PAGE_XML", org.jooq.impl.SQLDataType.CLOB, this, "xml配置信息");

    /**
     * The column <code>spider_base.IP_ADDR</code>. 爬虫服务器所在的IP地址
     */
    public final TableField<SpiderBaseRecord, String> IP_ADDR = createField("IP_ADDR", org.jooq.impl.SQLDataType.VARCHAR(20), this, "爬虫服务器所在的IP地址");

    /**
     * The column <code>spider_base.NEED_LOAD</code>. 0 未登陆
            1 已登陆
     */
    public final TableField<SpiderBaseRecord, Integer> NEED_LOAD = createField("NEED_LOAD", org.jooq.impl.SQLDataType.INTEGER, this, "0 未登陆\r\n            1 已登陆");

    /**
     * Create a <code>spider_base</code> table reference
     */
    public SpiderBase() {
        this(DSL.name("spider_base"), null);
    }

    /**
     * Create an aliased <code>spider_base</code> table reference
     */
    public SpiderBase(String alias) {
        this(DSL.name(alias), SPIDER_BASE);
    }

    /**
     * Create an aliased <code>spider_base</code> table reference
     */
    public SpiderBase(Name alias) {
        this(alias, SPIDER_BASE);
    }

    private SpiderBase(Name alias, Table<SpiderBaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private SpiderBase(Name alias, Table<SpiderBaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("爬虫基本信息"));
    }

    public <O extends Record> SpiderBase(Table<O> child, ForeignKey<O, SpiderBaseRecord> key) {
        super(child, key, SPIDER_BASE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPIDER_BASE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpiderBaseRecord> getPrimaryKey() {
        return Keys.KEY_SPIDER_BASE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpiderBaseRecord>> getKeys() {
        return Arrays.<UniqueKey<SpiderBaseRecord>>asList(Keys.KEY_SPIDER_BASE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpiderBase as(String alias) {
        return new SpiderBase(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpiderBase as(Name alias) {
        return new SpiderBase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpiderBase rename(String name) {
        return new SpiderBase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpiderBase rename(Name name) {
        return new SpiderBase(name, null);
    }
}
