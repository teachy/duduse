/*
 * This file is generated by jOOQ.
 */
package com.tu.duduse.infrastructure.jooq.tables;


import com.tu.duduse.infrastructure.jooq.DefaultSchema;
import com.tu.duduse.infrastructure.jooq.Indexes;
import com.tu.duduse.infrastructure.jooq.Keys;
import com.tu.duduse.infrastructure.jooq.tables.records.SourcesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sources extends TableImpl<SourcesRecord> {

    private static final long serialVersionUID = 404087018;

    /**
     * The reference instance of <code>sources</code>
     */
    public static final Sources SOURCES = new Sources();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourcesRecord> getRecordType() {
        return SourcesRecord.class;
    }

    /**
     * The column <code>sources.id</code>. 唯一标识
     */
    public final TableField<SourcesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "唯一标识");

    /**
     * The column <code>sources.name</code>. 资源描述
     */
    public final TableField<SourcesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "资源描述");

    /**
     * The column <code>sources.url</code>. 资源url
     */
    public final TableField<SourcesRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(128), this, "资源url");

    /**
     * The column <code>sources.pass</code>. 资源密码
     */
    public final TableField<SourcesRecord, String> PASS = createField("pass", org.jooq.impl.SQLDataType.VARCHAR(64), this, "资源密码");

    /**
     * The column <code>sources.status</code>. 资源是否可用（0：可用1：可用但是有错误2：不可用）
     */
    public final TableField<SourcesRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(8).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "资源是否可用（0：可用1：可用但是有错误2：不可用）");

    /**
     * The column <code>sources.description</code>. 资源描述
     */
    public final TableField<SourcesRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "资源描述");

    /**
     * Create a <code>sources</code> table reference
     */
    public Sources() {
        this(DSL.name("sources"), null);
    }

    /**
     * Create an aliased <code>sources</code> table reference
     */
    public Sources(String alias) {
        this(DSL.name(alias), SOURCES);
    }

    /**
     * Create an aliased <code>sources</code> table reference
     */
    public Sources(Name alias) {
        this(alias, SOURCES);
    }

    private Sources(Name alias, Table<SourcesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sources(Name alias, Table<SourcesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sources(Table<O> child, ForeignKey<O, SourcesRecord> key) {
        super(child, key, SOURCES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SOURCES_NGRAM_IDX, Indexes.SOURCES_PRIMARY, Indexes.SOURCES_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SourcesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SOURCES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SourcesRecord> getPrimaryKey() {
        return Keys.KEY_SOURCES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SourcesRecord>> getKeys() {
        return Arrays.<UniqueKey<SourcesRecord>>asList(Keys.KEY_SOURCES_PRIMARY, Keys.KEY_SOURCES_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sources as(String alias) {
        return new Sources(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sources as(Name alias) {
        return new Sources(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(String name) {
        return new Sources(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sources rename(Name name) {
        return new Sources(name, null);
    }
}
