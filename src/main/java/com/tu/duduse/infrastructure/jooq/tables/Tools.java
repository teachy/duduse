/*
 * This file is generated by jOOQ.
 */
package com.tu.duduse.infrastructure.jooq.tables;


import com.tu.duduse.infrastructure.jooq.DefaultSchema;
import com.tu.duduse.infrastructure.jooq.Indexes;
import com.tu.duduse.infrastructure.jooq.Keys;
import com.tu.duduse.infrastructure.jooq.tables.records.ToolsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tools extends TableImpl<ToolsRecord> {

    private static final long serialVersionUID = 881446243;

    /**
     * The reference instance of <code>tools</code>
     */
    public static final Tools TOOLS = new Tools();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToolsRecord> getRecordType() {
        return ToolsRecord.class;
    }

    /**
     * The column <code>tools.id</code>.
     */
    public final TableField<ToolsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>tools.user</code>. 使用者
     */
    public final TableField<ToolsRecord, String> USER = createField("user", org.jooq.impl.SQLDataType.VARCHAR(64), this, "使用者");

    /**
     * The column <code>tools.name</code>. 网站名字
     */
    public final TableField<ToolsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "网站名字");

    /**
     * The column <code>tools.url</code>.
     */
    public final TableField<ToolsRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>tools.status</code>. 1为可用
     */
    public final TableField<ToolsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false), this, "1为可用");

    /**
     * The column <code>tools.description</code>.
     */
    public final TableField<ToolsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * Create a <code>tools</code> table reference
     */
    public Tools() {
        this(DSL.name("tools"), null);
    }

    /**
     * Create an aliased <code>tools</code> table reference
     */
    public Tools(String alias) {
        this(DSL.name(alias), TOOLS);
    }

    /**
     * Create an aliased <code>tools</code> table reference
     */
    public Tools(Name alias) {
        this(alias, TOOLS);
    }

    private Tools(Name alias, Table<ToolsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tools(Name alias, Table<ToolsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tools(Table<O> child, ForeignKey<O, ToolsRecord> key) {
        super(child, key, TOOLS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TOOLS_NGRAM_IDX, Indexes.TOOLS_PRIMARY, Indexes.TOOLS_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ToolsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TOOLS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ToolsRecord> getPrimaryKey() {
        return Keys.KEY_TOOLS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ToolsRecord>> getKeys() {
        return Arrays.<UniqueKey<ToolsRecord>>asList(Keys.KEY_TOOLS_PRIMARY, Keys.KEY_TOOLS_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tools as(String alias) {
        return new Tools(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tools as(Name alias) {
        return new Tools(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tools rename(String name) {
        return new Tools(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tools rename(Name name) {
        return new Tools(name, null);
    }
}
